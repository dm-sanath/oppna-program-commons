<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf
       http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs
       http://cxf.apache.org/schemas/jaxrs.xsd"
  >

  <jaxrs:server id="restService"
                address="http://localhost:9002/rest"
                staticSubresourceResolution="true">
    <jaxrs:serviceBeans>
      <ref bean="restServiceBean"/>
    </jaxrs:serviceBeans>
  </jaxrs:server>

  <bean id="restServiceBean" class="se.vgregion.messagebus.service.RestService"/>

  <!-- Defined the server endpoint to create the cxf-rs consumer -->
  <cxf:rsServer id="rsServer" address="http://localhost:9000/rest/test-rs/echo"
                serviceClass="se.vgregion.messagebus.service.RestService"/>

  <!-- The camel route context -->
  <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
    <route>
      <from uri="cxfrs://bean://rsServer"/>
      <log message="${body}" loggingLevel="INFO" />
      <!-- We can remove this configure as the CXFRS producer is using the HttpAPI by default -->
      <!--<setHeader headerName="CamelCxfRsUsingHttpAPI">-->
      <!--<constant>True</constant>        -->
      <!--</setHeader>-->
      <!--<to uri="cxfrs://bean://rsClient"/>-->
    </route>
  </camelContext>

</beans>